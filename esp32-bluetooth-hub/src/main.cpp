#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include <ArduinoJson.h>

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb54836-36ac-4d87-9f91-ba699084199d"

BLECharacteristic *pCharacteristic;
bool deviceConnected = false;

class MyServerCallbacks : public BLEServerCallbacks {
public:
    void onConnect(BLEServer* pServer) override {
        deviceConnected = true;
        Serial.println("Client connected");
    }

    void onDisconnect(BLEServer* pServer) override {
        deviceConnected = false;
        Serial.println("Client disconnected");
    }
};
void handleEvent(const char* requestId, const char* action, StaticJsonDocument<256>& payload) {
    Serial.print("üîß Handling event: ");
    Serial.println(action);

    // üëá –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –∫–∞–∂–¥–æ–º case)
    StaticJsonDocument<256> response;
    response["id"] = requestId;
    response["status"] = "error";
    response["message"] = "Unknown action";

    // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    if (strcmp(action, "toggle_led") == 0) {
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
        Serial.println("‚úÖ LED toggled");

        response["status"] = "success";
        response["action"] = "toggle_led";
        response["message"] = "LED state changed";

    } else if (strcmp(action, "get_device_info") == 0) {
        // –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ MAC-–∞–¥—Ä–µ—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
        BLEAddress mac = BLEDevice::getAddress();
        response["status"] = "success";
        response["action"] = "get_device_info";
        response["message"] = "Device info retrieved";
        response["mac_address"] = mac.toString().c_str();
        response["connected"] = deviceConnected;

    } else if (strcmp(action, "ping") == 0) {
        response["status"] = "success";
        response["message"] = "pong";
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    String jsonResponse;
    serializeJson(response, jsonResponse);
    pCharacteristic->setValue(jsonResponse.c_str());
    pCharacteristic->notify();

    Serial.print("üì§ Sent response: ");
    Serial.println(jsonResponse);
}
void setup() {
    Serial.begin(115200);

    BLEDevice::init("ESP32_BLE_ReactNative");
    BLEServer *pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    // üëá –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º MAC-–∞–¥—Ä–µ—Å ESP32
    BLEAddress macAddress = BLEDevice::getAddress();
    Serial.print("üì± ESP32 BLE MAC Address: ");
    Serial.println(macAddress.toString().c_str());

    BLEService *pService = pServer->createService(SERVICE_UUID);

    pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID,
        BLECharacteristic::PROPERTY_READ |
        BLECharacteristic::PROPERTY_WRITE |
        BLECharacteristic::PROPERTY_NOTIFY
    );

    pCharacteristic->addDescriptor(new BLE2902());

    pService->start();

    BLEAdvertising *pAdvertising = pServer->getAdvertising();
    pAdvertising->start();
    Serial.println("Waiting for a client connection...");
}

void loop() {
    if (deviceConnected) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (pCharacteristic->getValue().length() > 0) {
            String value = pCharacteristic->getValue().c_str();
            Serial.print("üì• Received: ");
            Serial.println(value);

            // üëá –ü–∞—Ä—Å–∏–º JSON
            StaticJsonDocument<256> doc;
            DeserializationError error = deserializeJson(doc, value);
            if (error) {
                Serial.print("‚ùå JSON parse error: ");
                Serial.println(error.c_str());
                pCharacteristic->setValue(""); // –û—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è
                return;
            }

            // üëá –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "id"
            const char* requestId = doc["id"];
            if (!requestId) {
                Serial.println("‚ö†Ô∏è Ignoring message without 'id'");
                pCharacteristic->setValue(""); // –û—á–∏—â–∞–µ–º
                return;
            }

            // üëá –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (action) –∏ payload (–≤–µ—Å—å doc)
            const char* action = doc["action"] | ""; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // üéØ –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å payload
            handleEvent(requestId, action, doc);

            // üëá –û–ß–ò–©–ê–ï–ú –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑!
            pCharacteristic->setValue("");
        }
    }
    delay(100);
}